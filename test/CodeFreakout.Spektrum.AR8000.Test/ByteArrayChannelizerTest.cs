using NUnit.Framework;

namespace CodeFreakout.Spektrum.AR8000.Test
{
    [TestFixture]
    class ByteArrayChannelizerTest
    {
        [Test]
        public void Channelize_Negative99Throttle_ThrottleCorrect()
        {
            var values = new byte[32] { 0x00, 0x00, 0x0C, 0x00, 0x29, 0x72, 0x14, 0x00, 0x1C, 0x00, 0x34, 0x05, 0x3B, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x8C, 0x00, 0x29, 0x72, 0x14, 0x00, 0x26, 0xAA, 0x01, 0x72, 0xFF, 0xFF, 0xFF, 0xFF };
            var channelizer = new ByteArrayChannelizer();

            var channelizedValues = channelizer.Channelize(values);

            Assert.AreEqual(-142, channelizedValues[5]);
        }

        [Test]
        public void Channelize_99Throttle_ThrottleCorrect()
        {
            var values = new byte[32] { 0x00, 0x00, 0x0C, 0x00, 0x2E, 0x94, 0x14, 0x00, 0x1C, 0x00, 0x34, 0x05, 0x3B, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x8C, 0x00, 0x2E, 0x94, 0x14, 0x00, 0x26, 0xAA, 0x01, 0x72, 0xFF, 0xFF, 0xFF, 0xFF };
            var channelizer = new ByteArrayChannelizer();

            var channelizedValues = channelizer.Channelize(values);

            Assert.AreEqual(148, channelizedValues[5]);
        }

        [Test]
        public void Channelize_Negative99Aileron_AileronCorrect()
        {
            var values = new byte[32] { 0x00, 0x00, 0x09, 0x5A, 0x29, 0x72, 0x14, 0x00, 0x1C, 0x00, 0x34, 0x05, 0x3B, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x89, 0x5A, 0x29, 0x74, 0x14, 0x00, 0x26, 0xAA, 0x01, 0x74, 0xFF, 0xFF, 0xFF, 0xFF };
            var channelizer = new ByteArrayChannelizer();

            var channelizedValues = channelizer.Channelize(values);

            Assert.AreEqual(-166, channelizedValues[1]);
        }

        [Test]
        public void Channelize_99Aileron_AileronCorrect()
        {
            var values = new byte[32] { 0x00, 0x00, 0x0E, 0xA0, 0x29, 0x74, 0x14, 0x00, 0x1C, 0x00, 0x34, 0x05, 0x3B, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x8E, 0xA0, 0x29, 0x74, 0x14, 0x00, 0x26, 0xAA, 0x01, 0x74, 0xFF, 0xFF, 0xFF, 0xFF };
            var channelizer = new ByteArrayChannelizer();

            var channelizedValues = channelizer.Channelize(values);

            Assert.AreEqual(160, channelizedValues[1]);
        }

        [Test]
        public void Channelize_Negative99Elevator_ElevatorCorrect()
        {
            var values = new byte[32] { 0x00, 0x00, 0x0C, 0x00, 0x29, 0x71, 0x11, 0x5E, 0x1C, 0x00, 0x34, 0x77, 0x3B, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x8C, 0x02, 0x29, 0x72, 0x11, 0x5E, 0x26, 0xAA, 0x01, 0x58, 0xFF, 0xFF, 0xFF, 0xFF };
            var channelizer = new ByteArrayChannelizer();

            var channelizedValues = channelizer.Channelize(values);

            Assert.AreEqual(-162, channelizedValues[2]);
        }

        [Test]
        public void Channelize_99Elevator_ElevatorCorrect()
        {
            var values = new byte[32] { 0x00, 0x00, 0x0C, 0x1A, 0x29, 0x71, 0x16, 0xA9, 0x1C, 0x00, 0x34, 0x77, 0x3B, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x8C, 0x1A, 0x29, 0x72, 0x16, 0xA9, 0x26, 0xAA, 0x01, 0x58, 0xFF, 0xFF, 0xFF, 0xFF };
            var channelizer = new ByteArrayChannelizer();

            var channelizedValues = channelizer.Channelize(values);

            Assert.AreEqual(169, channelizedValues[2]);
        }

        [Test]
        public void Channelize_Negative99Rudder_RudderCorrect()
        {
            var values = new byte[32] { 0x00, 0x00, 0x0C, 0x00, 0x29, 0x69, 0x14, 0x00, 0x19, 0x5E, 0x34, 0x77, 0x3B, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x8C, 0x00, 0x29, 0x6A, 0x14, 0x00, 0x26, 0xAA, 0x01, 0x50, 0xFF, 0xFF, 0xFF, 0xFF };
            var channelizer = new ByteArrayChannelizer();

            var channelizedValues = channelizer.Channelize(values);

            Assert.AreEqual(-162, channelizedValues[3]);
        }

        [Test]
        public void Channelize_99Rudder_RudderEqualsCorrect()
        {
            var values = new byte[32] { 0x00, 0x00, 0x0C, 0x00, 0x29, 0x66, 0x14, 0x00, 0x1E, 0xA7, 0x34, 0x77, 0x3B, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x8C, 0x00, 0x29, 0x67, 0x14, 0x00, 0x26, 0xAA, 0x01, 0x4C, 0xFF, 0xFF, 0xFF, 0xFF };
            var channelizer = new ByteArrayChannelizer();

            var channelizedValues = channelizer.Channelize(values);

            Assert.AreEqual(167, channelizedValues[3]);
        }

        [Test]
        public void Channelize_Negative100Gear_GearCorrect()
        {
            var values = new byte[32] { 0x00, 0x00, 0x0C, 0x00, 0x29, 0x74, 0x14, 0x00, 0x1C, 0x00, 0x34, 0x77, 0x3B, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x8C, 0x00, 0x29, 0x75, 0x14, 0x00, 0x21, 0x56, 0x01, 0x5A, 0xFF, 0xFF, 0xFF, 0xFF };
            var channelizer = new ByteArrayChannelizer();

            var channelizedValues = channelizer.Channelize(values);

            Assert.AreEqual(-170, channelizedValues[4]);
        }

        [Test]
        public void Channelize_0Gear_GearCorrect()
        {
            var values = new byte[32] { 0x00, 0x00, 0x0C, 0x00, 0x29, 0x74, 0x14, 0x00, 0x1C, 0x00, 0x34, 0x77, 0x3B, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x8C, 0x00, 0x29, 0x75, 0x14, 0x00, 0x24, 0x00, 0x01, 0x5A, 0xFF, 0xFF, 0xFF, 0xFF };
            var channelizer = new ByteArrayChannelizer();

            var channelizedValues = channelizer.Channelize(values);

            Assert.AreEqual(0, channelizedValues[4]);
        }

        [Test]
        public void Channelize_100Gear_GearCorrect()
        {
            var values = new byte[32] { 0x00, 0x00, 0x0C, 0x00, 0x29, 0x74, 0x14, 0x00, 0x1C, 0x00, 0x34, 0x77, 0x3B, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x8C, 0x00, 0x29, 0x75, 0x14, 0x00, 0x26, 0xAA, 0x01, 0x5A, 0xFF, 0xFF, 0xFF, 0xFF };
            var channelizer = new ByteArrayChannelizer();

            var channelizedValues = channelizer.Channelize(values);

            Assert.AreEqual(170, channelizedValues[4]);
        }

        [Test]
        public void Channelize_Negative100Auxilery2_Auxilery2Correct()
        {
            var values = new byte[32] { 0x00, 0x00, 0x0C, 0x00, 0x29, 0x71, 0x14, 0x00, 0x1C, 0x00, 0x31, 0x56, 0x3B, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x8C, 0x00, 0x29, 0x72, 0x14, 0x00, 0x26, 0xAA, 0x01, 0x58, 0xFF, 0xFF, 0xFF, 0xFF };
            var channelizer = new ByteArrayChannelizer();

            var channelizedValues = channelizer.Channelize(values);

            Assert.AreEqual(-170, channelizedValues[6]);
        }

        [Test]
        public void Channelize_100Auxilery2_Auxilery2Correct()
        {
            var values = new byte[32] { 0x00, 0x00, 0x0C, 0x00, 0x29, 0x72, 0x14, 0x00, 0x1C, 0x00, 0x36, 0xAA, 0x3B, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x8C, 0x00, 0x29, 0x72, 0x14, 0x00, 0x26, 0xAA, 0x01, 0x58, 0xFF, 0xFF, 0xFF, 0xFF };
            var channelizer = new ByteArrayChannelizer();

            var channelizedValues = channelizer.Channelize(values);

            Assert.AreEqual(170, channelizedValues[6]);
        }
    }
}
